// Code generated by mockery v2.40.3. DO NOT EDIT.

package mock_gateway

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/brunobrolesi/marmota-de-briga/internal/business/model"
)

// MockClientRepository is an autogenerated mock type for the ClientRepository type
type MockClientRepository struct {
	mock.Mock
}

type MockClientRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientRepository) EXPECT() *MockClientRepository_Expecter {
	return &MockClientRepository_Expecter{mock: &_m.Mock}
}

// GetClient provides a mock function with given fields: ctx, clientID
func (_m *MockClientRepository) GetClient(ctx context.Context, clientID model.ClientID) (*model.Client, error) {
	ret := _m.Called(ctx, clientID)

	if len(ret) == 0 {
		panic("no return value specified for GetClient")
	}

	var r0 *model.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.ClientID) (*model.Client, error)); ok {
		return rf(ctx, clientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.ClientID) *model.Client); ok {
		r0 = rf(ctx, clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.ClientID) error); ok {
		r1 = rf(ctx, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientRepository_GetClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClient'
type MockClientRepository_GetClient_Call struct {
	*mock.Call
}

// GetClient is a helper method to define mock.On call
//   - ctx context.Context
//   - clientID model.ClientID
func (_e *MockClientRepository_Expecter) GetClient(ctx interface{}, clientID interface{}) *MockClientRepository_GetClient_Call {
	return &MockClientRepository_GetClient_Call{Call: _e.mock.On("GetClient", ctx, clientID)}
}

func (_c *MockClientRepository_GetClient_Call) Run(run func(ctx context.Context, clientID model.ClientID)) *MockClientRepository_GetClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.ClientID))
	})
	return _c
}

func (_c *MockClientRepository_GetClient_Call) Return(_a0 *model.Client, _a1 error) *MockClientRepository_GetClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientRepository_GetClient_Call) RunAndReturn(run func(context.Context, model.ClientID) (*model.Client, error)) *MockClientRepository_GetClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientRepository creates a new instance of MockClientRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientRepository {
	mock := &MockClientRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
