// Code generated by mockery v2.40.3. DO NOT EDIT.

package mock_usecase

import (
	context "context"

	model "github.com/brunobrolesi/marmota-de-briga/internal/business/model"
	mock "github.com/stretchr/testify/mock"

	usecase "github.com/brunobrolesi/marmota-de-briga/internal/business/usecase"
)

// MockCreateTransactionUseCase is an autogenerated mock type for the CreateTransactionUseCase type
type MockCreateTransactionUseCase struct {
	mock.Mock
}

type MockCreateTransactionUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCreateTransactionUseCase) EXPECT() *MockCreateTransactionUseCase_Expecter {
	return &MockCreateTransactionUseCase_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, input
func (_m *MockCreateTransactionUseCase) Execute(ctx context.Context, input *usecase.InputCreateTransaction) (*model.Client, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *model.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *usecase.InputCreateTransaction) (*model.Client, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *usecase.InputCreateTransaction) *model.Client); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *usecase.InputCreateTransaction) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCreateTransactionUseCase_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockCreateTransactionUseCase_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - input *usecase.InputCreateTransaction
func (_e *MockCreateTransactionUseCase_Expecter) Execute(ctx interface{}, input interface{}) *MockCreateTransactionUseCase_Execute_Call {
	return &MockCreateTransactionUseCase_Execute_Call{Call: _e.mock.On("Execute", ctx, input)}
}

func (_c *MockCreateTransactionUseCase_Execute_Call) Run(run func(ctx context.Context, input *usecase.InputCreateTransaction)) *MockCreateTransactionUseCase_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*usecase.InputCreateTransaction))
	})
	return _c
}

func (_c *MockCreateTransactionUseCase_Execute_Call) Return(_a0 *model.Client, _a1 error) *MockCreateTransactionUseCase_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCreateTransactionUseCase_Execute_Call) RunAndReturn(run func(context.Context, *usecase.InputCreateTransaction) (*model.Client, error)) *MockCreateTransactionUseCase_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCreateTransactionUseCase creates a new instance of MockCreateTransactionUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCreateTransactionUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCreateTransactionUseCase {
	mock := &MockCreateTransactionUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
